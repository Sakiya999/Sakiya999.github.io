<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sakiya的个人博客</title>
  
  
  <link href="http://sakiya.top/atom.xml" rel="self"/>
  
  <link href="http://sakiya.top/"/>
  <updated>2022-06-17T09:05:37.903Z</updated>
  <id>http://sakiya.top/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用hardhat发布并在Etherscan验证合约</title>
    <link href="http://sakiya.top/2022/06/17/hardhat-verify-eth/"/>
    <id>http://sakiya.top/2022/06/17/hardhat-verify-eth/</id>
    <published>2022-06-17T07:19:09.000Z</published>
    <updated>2022-06-17T09:05:37.903Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装hardhat"><a class="markdownIt-Anchor" href="#安装hardhat"></a> 安装hardhat</h3><p>首先把相关环境装一装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hardhat</span><br><span class="line">npx hardhat</span><br></pre></td></tr></table></figure><p><img src="/images/img1.png" alt="" /></p><p>我这里选择 “Create a basic sample project”，会创建一个样例project，然后会提示要不要装一些依赖之类的，一路选yes。</p><p>成功了会在目录生成一些文件，有一个样例合约：</p><p><strong>contracts/Greeter.sol</strong></p><p>这个合约可以随便改点东西，比如加个没用的函数之类（主要是后面验证的时候如果是同样的代码，会被自动识别出来并自动验证）。</p><p>还有一些其他需要的插件之类的可以装一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实现从.<span class="built_in">env</span>读取参数配置</span></span><br><span class="line">npm install dotenv</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etherscan的插件，可以实现发布合约</span></span><br><span class="line">npm install --save-dev @nomiclabs/hardhat-etherscan</span><br></pre></td></tr></table></figure><h3 id="编译测试合约"><a class="markdownIt-Anchor" href="#编译测试合约"></a> 编译测试合约</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译</span></span><br><span class="line">npx hardhat compile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试</span></span><br><span class="line">npx hardhat test</span><br></pre></td></tr></table></figure><p>正常来说这两步应该没什么问题，测试代码在test/sample-test.js ，也可以根据自己的需求进行修改。</p><h3 id="发布合约"><a class="markdownIt-Anchor" href="#发布合约"></a> 发布合约</h3><p>为了发布合约，首先需要准备一些东西，这篇文章的合约在rinkeby测试网进行发布测试。</p><ol><li>发布合约的私钥。</li><li>对应网络的rpc url，这里使用<a href="https://dashboard.alchemyapi.io/">alchemyapi</a>，没有可以去免费注册一个，或者你用<a href="https://infura.io/">infura</a>或者别的都可以。</li><li>etherscan的API Key （只是发布不验证的话可以不用），可以去<a href="https://etherscan.io/">Etherscan</a>注册一个，这是<a href="https://docs.etherscan.io/getting-started/creating-an-account">教程</a>。</li></ol><p>上面几样准备好以后，我们要修改一下配置。</p><p>创建一个.env文件，填入各种key：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALCHEMY_KEY = &quot;&lt;your alchemy key&gt;&quot;</span><br><span class="line">ACCOUNT_PRIVATE_KEY = &quot;&lt;your private key&gt;&quot;</span><br><span class="line">ETHSCAN_API_KEY = &quot;&lt;your etherscan api key&gt;&quot;</span><br></pre></td></tr></table></figure><p>修改hardhat.config.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;dotenv&#x27;</span>).<span class="title function_">config</span>();</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;@nomiclabs/hardhat-waffle&quot;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;@nomiclabs/hardhat-etherscan&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is a sample Hardhat task. To learn how to create your own go to</span></span><br><span class="line"><span class="comment">// https://hardhat.org/guides/create-task.html</span></span><br><span class="line"><span class="title function_">task</span>(<span class="string">&quot;accounts&quot;</span>, <span class="string">&quot;Prints the list of accounts&quot;</span>, <span class="keyword">async</span> (taskArgs, hre) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> accounts = <span class="keyword">await</span> hre.<span class="property">ethers</span>.<span class="title function_">getSigners</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> account <span class="keyword">of</span> accounts) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(account.<span class="property">address</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="variable constant_">ALCHEMY_KEY</span>, <span class="variable constant_">ACCOUNT_PRIVATE_KEY</span>, <span class="variable constant_">ETHSCAN_API_KEY</span> &#125; = process.<span class="property">env</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// You need to export an object to set up your config</span></span><br><span class="line"><span class="comment">// Go to https://hardhat.org/config/ to learn more</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type</span> import(&#x27;hardhat/config&#x27;).HardhatUserConfig</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">solidity</span>: <span class="string">&quot;0.8.4&quot;</span>,</span><br><span class="line">  <span class="attr">defaultNetwork</span>: <span class="string">&quot;hardhat&quot;</span>,</span><br><span class="line">  <span class="attr">networks</span>: &#123;</span><br><span class="line">    <span class="attr">hardhat</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">rinkeby</span>: &#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">`https://eth-rinkeby.alchemyapi.io/v2/<span class="subst">$&#123;ALCHEMY_KEY&#125;</span>`</span>,</span><br><span class="line">      <span class="attr">accounts</span>: [<span class="string">`0x<span class="subst">$&#123;ACCOUNT_PRIVATE_KEY&#125;</span>`</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">ethereum</span>: &#123;</span><br><span class="line">      <span class="attr">chainId</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">url</span>: <span class="string">`https://eth-mainnet.alchemyapi.io/v2/<span class="subst">$&#123;ALCHEMY_KEY&#125;</span>`</span>,</span><br><span class="line">      <span class="attr">accounts</span>: [<span class="string">`0x<span class="subst">$&#123;ACCOUNT_PRIVATE_KEY&#125;</span>`</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">etherscan</span>: &#123;</span><br><span class="line">    <span class="comment">// Your API key for Etherscan</span></span><br><span class="line">    <span class="comment">// Obtain one at https://etherscan.io/</span></span><br><span class="line">    <span class="attr">apiKey</span>: <span class="variable constant_">ETHSCAN_API_KEY</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来是编写发布合约的脚本，在样例中已经有了：scripts/sample-script.js， 如果有特殊需求，可以去修改或者重写一个。</p><p>然后就是执行这个脚本就可以发布了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hardhat run scripts/sample-script.js --network rinkeby</span><br></pre></td></tr></table></figure><p>然后打开etherscan查找这个合约，可以看到此时并没有验证源码，接下来要上传并验证源码。</p><p><img src="/images/img2.png" alt="" /></p><h3 id="验证合约源码"><a class="markdownIt-Anchor" href="#验证合约源码"></a> 验证合约源码</h3><p>安装并在<strong>hardhat.config.js</strong>中导入**@nomiclabs/hardhat-etherscan**包就可以使用verify指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hardhat verify --network rinkeby DEPLOYED_CONTRACT_ADDRESS &quot;Constructor argument 1&quot;</span><br></pre></td></tr></table></figure><p>解释一下，verify不需要指定具体使用那个合约，它会自动寻找匹配的合约进行验证，所以只需要已发布的合约地址和初始化合约的参数。比如样例就是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hardhat verify --network rinkeby 0xA9D399.... &quot;Hello, Hardhat!&quot;</span><br></pre></td></tr></table></figure><p>另外，如果你的合约初始化参数比较复杂，就需要写一个js文件，比如你的初始化参数是这样的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  uint x;</span><br><span class="line">  uint y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Foo &#123;</span><br><span class="line">  <span class="built_in">constructor</span> (uint x, string s, Point memory point, bytes b) &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么你可以写个arguments.js文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = [</span><br><span class="line">  <span class="number">50</span>,</span><br><span class="line">  <span class="string">&quot;a string argument&quot;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">5</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// bytes have to be 0x-prefixed</span></span><br><span class="line">  <span class="string">&quot;0xabcdef&quot;</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>然后使用下面指令进行验证：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hardhat verify --constructor-args arguments.js DEPLOYED_CONTRACT_ADDRESS</span><br></pre></td></tr></table></figure><h3 id="解决国内验证失败的问题"><a class="markdownIt-Anchor" href="#解决国内验证失败的问题"></a> 解决国内验证失败的问题</h3><p>如果你的网络环境是国内的，那么就会产生下面的错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error in plugin @nomiclabs/hardhat-etherscan: Failed to send contract verification request.</span><br><span class="line">Endpoint URL: https://api-rinkeby.etherscan.io/api</span><br><span class="line">Reason: Connect Timeout Error</span><br></pre></td></tr></table></figure><p>想要解决这个问题，首先你需要一个代理，然后想办法让请求走代理就行了。</p><p>翻了一下 <strong>@nomiclabs/hardhat-etherscan</strong> 的源码，发现发送请求使用的是 <strong>undici</strong> 。没用过这个，简单看了一下github，感觉写的不太清楚，没发现怎么使用代理。算了，直接换成request请求好了，用别的方法也差不多，反正把这个请求改成走代理就行了。</p><p>先打开文件： <strong>node_modules/@nomiclabs/hardhat-etherscan/dist/src/etherscan/EtherscanService.js</strong></p><p>修改函数： <strong>verifyContract</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">verifyContract</span>(<span class="params">url, req</span>) &#123;</span><br><span class="line">    <span class="comment">// 原来的代码， 使用undici发请求</span></span><br><span class="line">    <span class="comment">// const &#123; request &#125; = await Promise.resolve().then(() =&gt; __importStar(require(&quot;undici&quot;)));</span></span><br><span class="line">    <span class="comment">// const parameters = new URLSearchParams(Object.assign(&#123;&#125;, req));</span></span><br><span class="line">    <span class="comment">// const method = &quot;POST&quot;;</span></span><br><span class="line">    <span class="comment">// const requestDetails = &#123;</span></span><br><span class="line">    <span class="comment">//     method,</span></span><br><span class="line">    <span class="comment">//     headers: &#123; &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot; &#125;,</span></span><br><span class="line">    <span class="comment">//     body: parameters.toString(),</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line">    <span class="comment">// 改成用request发，把proxy改成自己的代理就行了</span></span><br><span class="line">    <span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">request_verify</span>(<span class="params">url, data</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">request</span>(&#123;</span><br><span class="line">                <span class="attr">proxy</span>: <span class="string">&quot;http://localhost:7890&quot;</span>,</span><br><span class="line">                <span class="attr">url</span>: url,</span><br><span class="line">                <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">                <span class="attr">headers</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">form</span>: data</span><br><span class="line">            &#125;, <span class="function">(<span class="params">error, response, body</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(error);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(body);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> response;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// response = await request(url, requestDetails);</span></span><br><span class="line">        response = <span class="keyword">await</span> <span class="title function_">request_verify</span>(url, req);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 后面省略</span></span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于使用request返回值和原来的格式不同，肯定会报错的，这点应该无所谓了，看一下请求返回的内容成没成功就行了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;安装hardhat&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#安装hardhat&quot;&gt;&lt;/a&gt; 安装hardhat&lt;/h3&gt;
&lt;p&gt;首先把相关环境装一装&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;tab</summary>
      
    
    
    
    <category term="区块链" scheme="http://sakiya.top/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="以太坊" scheme="http://sakiya.top/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
  </entry>
  
  <entry>
    <title>Solana账号地址转换</title>
    <link href="http://sakiya.top/2022/06/16/solana-account-convert/"/>
    <id>http://sakiya.top/2022/06/16/solana-account-convert/</id>
    <published>2022-06-16T13:46:44.000Z</published>
    <updated>2022-06-16T14:09:18.481Z</updated>
    
    <content type="html"><![CDATA[<p>Solana 账号地址有多种表示方式，钱包和solscan上看到的一般是这种形式：<br /><strong>Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB</strong></p><p>而用solana的web3.js库来生成的账号的话：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> web3 = <span class="built_in">require</span>(<span class="string">&#x27;@solana/web3.js&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> account = web3.<span class="property">Keypair</span>.<span class="title function_">generate</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;account:&quot;</span>, account)</span><br></pre></td></tr></table></figure><p>结果是这样的：</p><blockquote><p>account: Keypair {</p><p>_keypair: {</p><p>publicKey: Uint8Array(32) [</p><p>156, 43, 124, 173, 206, 237, 208,  7,</p><p>190, 155, 53, 17, 32, 162, 249, 149,</p><p>​    23,  5, 175, 121, 108, 35, 19, 47,</p><p>155, 224, 138,  4, 62,  4, 54, 118</p><p>],</p><p>secretKey: Uint8Array(64) [</p><p>​    79, 206, 135,  1, 237, 132, 132, 64, 32, 175, 29,</p><p>​    69, 175, 166, 41, 124, 170, 120, 225, 16, 140,  8,</p><p>125, 136, 37, 145, 114, 177, 220, 25, 203, 190, 156,</p><p>​    43, 124, 173, 206, 237, 208,  7, 190, 155, 53, 17,</p><p>​    32, 162, 249, 149, 23,  5, 175, 121, 108, 35, 19,</p><p>​    47, 155, 224, 138,  4, 62,  4, 54, 118</p><p>]</p><p>}</p><p>}</p></blockquote><p>二者转换并不难，只要知道它是如何编码的，solana的地址采用的是base58编码，比特币用的就是这种方式。</p><p>可以直接使用bs58的库来进行转化，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> web3 = <span class="built_in">require</span>(<span class="string">&#x27;@solana/web3.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bs58 = <span class="built_in">require</span>(<span class="string">&#x27;bs58&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> account = web3.<span class="property">Keypair</span>.<span class="title function_">generate</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;account:&quot;</span>, account)</span><br><span class="line"><span class="comment">// bytes to base58</span></span><br><span class="line"><span class="keyword">let</span> private_key = bs58.<span class="title function_">encode</span>(account.<span class="property">secretKey</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;private_key:&quot;</span>, private_key);</span><br><span class="line"><span class="comment">// base68 to bytes</span></span><br><span class="line"><span class="keyword">const</span> decoded_key = bs58.<span class="title function_">decode</span>(private_key);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;decoded_key:&quot;</span>, decoded_key);</span><br><span class="line"><span class="keyword">let</span> account_restore = <span class="keyword">new</span> web3.<span class="title class_">Account</span>(decoded_key);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;account_restore:&quot;</span>, account_restore)</span><br></pre></td></tr></table></figure><p>结果如下：</p><blockquote><p>account: Keypair {</p><p>_keypair: {</p><p>publicKey: Uint8Array(32) [</p><p>188, 157, 166, 231, 52, 155, 151, 249,</p><p>186, 174, 13, 79, 29, 19, 203, 55,</p><p>​    64, 97, 209, 231, 17,  1, 90, 129,</p><p>177, 34, 238, 137, 76, 190, 175, 114</p><p>],</p><p>secretKey: Uint8Array(64) [</p><p>251, 166, 106, 213, 81, 158, 129, 72, 55, 59, 204,</p><p>113, 209, 241, 255, 209, 16, 69, 217, 91, 216, 177,</p><p>152, 187, 66,  3, 210, 39, 251, 109, 206, 11, 188,</p><p>157, 166, 231, 52, 155, 151, 249, 186, 174, 13, 79,</p><p>​    29, 19, 203, 55, 64, 97, 209, 231, 17,  1, 90,</p><p>129, 177, 34, 238, 137, 76, 190, 175, 114</p><p>]</p><p>}</p><p>}</p><p>private_key: 62pGE5gVtL82roxrtQC2Hn5aaWLan9CQ64bwm76pQTdy8L4n9mxDqqEu7xHqZuYZCjxcLf47rwT4H1SEHEhFr7X7</p><p>decoded_key: Uint8Array(64) [</p><p>251, 166, 106, 213, 81, 158, 129, 72, 55, 59, 204,</p><p>113, 209, 241, 255, 209, 16, 69, 217, 91, 216, 177,</p><p>152, 187, 66,  3, 210, 39, 251, 109, 206, 11, 188,</p><p>157, 166, 231, 52, 155, 151, 249, 186, 174, 13, 79,</p><p>29, 19, 203, 55, 64, 97, 209, 231, 17,  1, 90,</p><p>129, 177, 34, 238, 137, 76, 190, 175, 114</p><p>]</p><p>account_restore: Account {</p><p>_keypair: {</p><p>publicKey: Uint8Array(32) [</p><p>188, 157, 166, 231, 52, 155, 151, 249,</p><p>186, 174, 13, 79, 29, 19, 203, 55,</p><p>​    64, 97, 209, 231, 17,  1, 90, 129,</p><p>177, 34, 238, 137, 76, 190, 175, 114</p><p>],</p><p>secretKey: Uint8Array(64) [</p><p>251, 166, 106, 213, 81, 158, 129, 72, 55, 59, 204,</p><p>113, 209, 241, 255, 209, 16, 69, 217, 91, 216, 177,</p><p>152, 187, 66,  3, 210, 39, 251, 109, 206, 11, 188,</p><p>157, 166, 231, 52, 155, 151, 249, 186, 174, 13, 79,</p><p>​    29, 19, 203, 55, 64, 97, 209, 231, 17,  1, 90,</p><p>129, 177, 34, 238, 137, 76, 190, 175, 114</p><p>]</p><p>}</p><p>}</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Solana 账号地址有多种表示方式，钱包和solscan上看到的一般是这种形式：&lt;br /&gt;
&lt;strong&gt;Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;而用solana的web3.js库来生成</summary>
      
    
    
    
    <category term="区块链" scheme="http://sakiya.top/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="Solana" scheme="http://sakiya.top/tags/Solana/"/>
    
    <category term="区块链" scheme="http://sakiya.top/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>新博客开张</title>
    <link href="http://sakiya.top/2022/06/15/first-blog/"/>
    <id>http://sakiya.top/2022/06/15/first-blog/</id>
    <published>2022-06-15T07:14:40.000Z</published>
    <updated>2022-06-15T07:00:30.684Z</updated>
    
    <content type="html"><![CDATA[<p>最近有点怠惰，打算继续写写博客。</p><p>之前在csdn写的，但csdn环境越来越差，不登陆不能复制，还看不到全文啥的，反正感觉挺烦的。</p><p>为了看的人考虑，还是搬个家吧。</p><p>比较懒，博客直接用的hexo模版，随便弄了一下，后面有心情了再好好搞搞吧。</p><p>csdn上的文章，有时间可能会把阅读量大的搬运一些过来，都搬过来工作量有点大。</p><p>希望能坚持下去～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近有点怠惰，打算继续写写博客。&lt;/p&gt;
&lt;p&gt;之前在csdn写的，但csdn环境越来越差，不登陆不能复制，还看不到全文啥的，反正感觉挺烦的。&lt;/p&gt;
&lt;p&gt;为了看的人考虑，还是搬个家吧。&lt;/p&gt;
&lt;p&gt;比较懒，博客直接用的hexo模版，随便弄了一下，后面有心情了再好好搞搞</summary>
      
    
    
    
    <category term="随笔" scheme="http://sakiya.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
</feed>
